// <auto-generated />
using System;
using System.Collections.Generic;
using EfCoreDto.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EfCoreDto.Infrastructure.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EfCoreDto.Core.Entities.Address", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address_line_1");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address_line_2");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("country");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit")
                        .HasColumnName("is_current");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("postal_code");

                    b.Property<int>("person_id")
                        .HasColumnType("int");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.HasKey("id");

                    b.HasIndex("person_id");

                    b.ToTable("address", (string)null);

                    b.HasDiscriminator<string>("type").HasValue("Address");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("EfCoreDto.Core.Entities.Owner", b =>
                {
                    b.Property<int>("vehicle_id")
                        .HasColumnType("int");

                    b.Property<int>("person_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2")
                        .HasColumnName("from_date");

                    b.Property<DateTime?>("To")
                        .HasColumnType("datetime2")
                        .HasColumnName("to_date");

                    b.HasKey("vehicle_id", "person_id");

                    b.HasIndex("person_id");

                    b.ToTable("vehicle_owner", (string)null);
                });

            modelBuilder.Entity("EfCoreDto.Core.Entities.Person", b =>
                {
                    b.Property<int>("_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("_id"));

                    b.ComplexProperty<Dictionary<string, object>>("Name", "EfCoreDto.Core.Entities.Person.Name#Name", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(128)
                                .HasColumnType("nvarchar(128)")
                                .HasColumnName("first_name");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(128)
                                .HasColumnType("nvarchar(128)")
                                .HasColumnName("last_name");
                        });

                    b.HasKey("_id");

                    b.ToTable("person", (string)null);
                });

            modelBuilder.Entity("EfCoreDto.Core.Entities.Vehicle", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("VIN")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)")
                        .HasColumnName("vin");

                    b.HasKey("id");

                    b.ToTable("vehicle", (string)null);
                });

            modelBuilder.Entity("EfCoreDto.Core.Entities.DeliveryAddress", b =>
                {
                    b.HasBaseType("EfCoreDto.Core.Entities.Address");

                    b.HasDiscriminator().HasValue("DeliveryAddress");
                });

            modelBuilder.Entity("EfCoreDto.Core.Entities.InvoiceAddress", b =>
                {
                    b.HasBaseType("EfCoreDto.Core.Entities.Address");

                    b.HasDiscriminator().HasValue("InvoiceAddress");
                });

            modelBuilder.Entity("EfCoreDto.Core.Entities.Address", b =>
                {
                    b.HasOne("EfCoreDto.Core.Entities.Person", null)
                        .WithMany("_addresses")
                        .HasForeignKey("person_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EfCoreDto.Core.Entities.Owner", b =>
                {
                    b.HasOne("EfCoreDto.Core.Entities.Person", "_person")
                        .WithMany()
                        .HasForeignKey("person_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EfCoreDto.Core.Entities.Vehicle", null)
                        .WithMany("_owners")
                        .HasForeignKey("vehicle_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_person");
                });

            modelBuilder.Entity("EfCoreDto.Core.Entities.Person", b =>
                {
                    b.Navigation("_addresses");
                });

            modelBuilder.Entity("EfCoreDto.Core.Entities.Vehicle", b =>
                {
                    b.Navigation("_owners");
                });
#pragma warning restore 612, 618
        }
    }
}
